name: Test workflows

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  schedule:
  - cron: "0 5 * * TUE"

# Cancel any in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BASE_ENV: envs/environment.yaml

jobs:
  run-tests:
    name: OS
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        include:
        - os: ubuntu
          env_file: envs/linux-64.lock.yaml
        - os: macos
          env_file: envs/osx-arm64.lock.yaml
        - os: windows
          env_file: envs/win-64.lock.yaml

    defaults:
      run:
        shell: bash {0}

    steps:
    - uses: actions/checkout@v4

    - name: Always use base environment.yaml
      run: echo "env_file=${{ env.BASE_ENV }}" >> $GITHUB_ENV

    - name: Show env file being used
      run: |
        echo "All environment variables:"
        env | sort
        echo "Using env file: $env_file"

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pypsa-earth
        channel-priority: strict
        conda-remove-defaults: true

    - name: Cache Conda env
      uses: actions/cache@v4
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles(format('{0}', env.env_file)) }}
      id: cache-env

    - name: Install micromamba and conda-lock
      shell: bash
      run: |
        # Choose correct platform
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          PLATFORM="linux-64"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          PLATFORM="osx-arm64"
        else
          echo "Unsupported OS: $RUNNER_OS"
          exit 1
        fi

        # Download and extract micromamba
        curl -Ls https://micro.mamba.pm/api/micromamba/${PLATFORM}/latest | tar -xvj bin/micromamba

        # Create env and install conda-lock
        ./bin/micromamba create -y -n lockenv -c conda-forge conda-lock
        ./bin/micromamba run -n lockenv conda-lock --version

        # Add to PATH for next steps
        echo "$(pwd)/bin" >> $GITHUB_PATH

    - name: Install environment using lock file
      run: micromamba run -n lockenv conda-lock install --name pypsa-earth envs/${{ matrix.env_file }}

    - name: Force install snakemake via pip
      run: conda run -n pypsa-earth pip install 'snakemake<8'

    - name: Downgrade pulp for snakemake compatibility
      run: conda run -n pypsa-earth pip install 'pulp==2.6.0'

    - name: Conda list
      run: conda list

    - name: Run Test
      run: |
        echo ">>> Running tests inside conda env"
        conda run -n pypsa-earth which snakemake || echo "Snakemake not found"
        conda run -n pypsa-earth snakemake --version || echo "Snakemake version error"
        conda run -n pypsa-earth make test

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ matrix.os }}
        path: |
          logs
          .snakemake/log
          results
        retention-days: 3

        # - name: Test plotting and summaries
        #   run: |
        #     snakemake --cores all plot_all_p_nom
        #     snakemake --cores all plot_all_summaries
        #     snakemake --cores all make_all_summaries
        #     rm -rf resources/*.nc resources/*.geojson resources/*.h5 networks results
